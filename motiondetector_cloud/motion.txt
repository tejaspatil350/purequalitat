int led = D0;                          //set led at digital 0 pin
int boardLed = D7;                     // set onboard led at digital 7 pin

int photoresistor = A0;                //set photoresistor at analog 0 pin 

int power = A5;                        //set power at analog 5 pin  

int intactValue;                       //when led and photoresistor are in front of each other it shows intact status
int brokenValue;                       //when led and photoresistor are in front of each other but there is any obstacle then it will shows broken status
int beamThreshold;                     //threshold value to recognize it is intact or broken  

bool beamBroken = false;               // bool is data type used for true or false

void setup()                          //initalization of variables as input or output
{

  pinMode(led,OUTPUT);                 // led as output
  pinMode(boardLed,OUTPUT);            // onboard led as output
  pinMode(photoresistor,INPUT);        // photoresistor as input
  pinMode(power,OUTPUT);               // The pin powering the photosensor is output (sending out consistent power)
  
  digitalWrite(power,HIGH);            // deliver power to the photosensor
  
  digitalWrite(boardLed,HIGH);         // First, the D7 LED will go on to tell you to put your hand in front of the beam.
  delay(2000);                         //delay of 2sec
  
  digitalWrite(boardLed,LOW);          // Then, the D7 LED will go off and the LED will turn on.
  digitalWrite(led,HIGH);              // led in front of photoresistor will be on
  delay(500);                          //delay of 0.5sec                        

                                           // Now we'll take some readings..
  int on_1 = analogRead(photoresistor);   //int on_1 equal to photoresistor and read photosensor 
  delay(200);                              //delay of 0.2sec
  int on_2 = analogRead(photoresistor);      //int on_2 equal to photoresistor and read photosensor
  delay(300);                                  // wait for 0.3sec

                                              // Now flash to let us know that you've taken the readings...
  digitalWrite(boardLed,HIGH);               
  delay(100);
  digitalWrite(boardLed,LOW);
  delay(100);
  digitalWrite(boardLed,HIGH);
  delay(100);
  digitalWrite(boardLed,LOW);
  delay(100);

                                               // Now the D7 LED will go on to tell you to remove your hand...  
  digitalWrite(boardLed,HIGH);
  delay(2000);

 
  digitalWrite(boardLed,LOW);                 // The D7 LED will turn off...

                                              // And we will take two more readings.
  int off_1 = analogRead(photoresistor);      // read photosensor
  delay(200);                                 // wait 0.2sec
  int off_2 = analogRead(photoresistor);      // read photosensor
  delay(1000);                                 //wait 1sec

                                              // Now flash the D7 LED on and off three times to let us know that we're ready to go!
  digitalWrite(boardLed,HIGH);                   
  delay(100);
  digitalWrite(boardLed,LOW);
  delay(100);
  digitalWrite(boardLed,HIGH);
  delay(100);
  digitalWrite(boardLed,LOW);
  delay(100);
  digitalWrite(boardLed,HIGH);
  delay(100);
  digitalWrite(boardLed,LOW);


                                             // average of reading for intact
  intactValue = (on_1+on_2)/2;
  brokenValue = (off_1+off_2)/2;             //average of reading for broken

  
  beamThreshold = (intactValue+brokenValue)/2;  //average of reading for threshold

}




void loop() {
  
                                                     // This loop sends a publish when the beam is broken.
  if (analogRead(photoresistor)>beamThreshold) 
{

    
    if (beamBroken==true)                           //if broken is true then execute the following loop
{
        
        
        Particle.publish("beamStatus","intact",60,PRIVATE);  // publish this private event
                                                          
        digitalWrite(boardLed,HIGH);                         //set board led to high
        delay(500);                                           //wait for 0.5sec
        digitalWrite(boardLed,LOW);                            //set board led to low

                                                               // Set the flag to reflect the current status of the beam.
        beamBroken=false;
    }
    else {
        
    }
  }

  else {
      
      if (beamBroken==false)                    //if broken is false then execute the execute the following loop  
{

        
        Particle.publish("beamStatus","broken",60,PRIVATE);    // publish this private event
       
        digitalWrite(boardLed,HIGH);                          //set board led to high   
        delay(500);                                           // wait for 0.5sec
        digitalWrite(boardLed,LOW);                           //set board led to low

  
 beamBroken=true;      
    }
  else {
    
 }
  }

}