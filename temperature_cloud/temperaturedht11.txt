#include <Adafruit_DHT.h>         //library

#include "Adafruit_DHT.h"         //library

#define DHTPIN D2                 //pin defined

#define DHTTYPE DHT11              //sensor type

DHT dht(DHTPIN, DHTTYPE);           // structure containing dht variable (arguments)

void setup()                         //initalization of variables
{
  
    Serial.begin(9600);               //Enables serial channel with specified configuration.
    Serial.println("DHT11 test!");    //serial print "DHT11 test!"

    dht.begin();                       // Start DHT sensor
}

void loop()
{    
    delay(60000);                          //wait 60sec
    
    float h = dht.getHumidity();           //Humidity measurement  
    float t = dht.getTempCelcius();        //temperature measurement
    float f = dht.getTempFarenheit();      //temperature in farenheit measurement
    
    if (isnan(h) || isnan(t) || isnan(f))                          // function determines whether a value is an illegal number (Not-a-Number). This function returns true if the value equates to NaN. Otherwise it returns false
{
        Serial.println("Failed to read from DHT sensor!");         //print "Failed to read from DHT sensor!" and cursor to new line for serial window
        return;
    }
   
    Serial.print("Humid: ");                            //print "Humid: " on serial window 
    Serial.print(h);                                    //print value of h
    Serial.print("% - ");                               //print "% - " on serial window
    Serial.print("Temp: ");                             //print "Temp: " on serial window
    Serial.print(f);                                    //print value of f
    Serial.print("*F ");                                //print "*F " on serial window
    Serial.println(Time.timeStr());                     //print "*F " on serial window

                                                       // Publish data and Particle.publish pushes the value out of the device at a time controlled by the device firmware.
    Particle.publish("temp", String (t));
    Particle.publish("humi", String (h));
}